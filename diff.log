diff --git a/examples/rocket_wallet_auth.rs b/examples/rocket_wallet_auth.rs
index 672eb60..4238e75 100644
--- a/examples/rocket_wallet_auth.rs
+++ b/examples/rocket_wallet_auth.rs
@@ -50,7 +50,7 @@ pub async fn protected_route(auth_token: AuthToken<()>) -> Result<(), ()> {
 #[rocket::post("/")]
 pub async fn authorize(wallet_auth: SolanaAuth, auth_manager: AuthManager) -> Json<String> {
     // Optional: fetch data from database / blockchain using wallet_auth
-    let token = auth_manager.generate_token::<(), _>(wallet_auth, None);
+    let token = auth_manager.generate_token(wallet_auth, ());
 
     Json(token)
 }
diff --git a/src/core/manager.rs b/src/core/manager.rs
index 8401868..da2dec0 100644
--- a/src/core/manager.rs
+++ b/src/core/manager.rs
@@ -76,7 +76,7 @@ impl AuthManager {
     ///
     /// # Returns
     /// A signed JWT string.
-    pub fn generate_token<T: Serialize + DeserializeOwned, P: AuthProvider>(&self, auth: P, data: Option<T>) -> String {
+    pub fn generate_token<T: Serialize + DeserializeOwned, P: AuthProvider>(&self, auth: P, data: T) -> String {
         AuthToken::<T>::sign(
             auth.subject(),
             data,
@@ -194,9 +194,9 @@ mod test {
         dotenv::dotenv().ok();
         let manager = AuthManager::mock_with_config(0, 0);
 
-        let token = manager.generate_token::<(), _>(
+        let token = manager.generate_token(
             SolanaAuth::mock(), 
-            None
+            ()
         );
         
         tokio::time::sleep(Duration::from_secs(1)).await;
diff --git a/src/core/token.rs b/src/core/token.rs
index 90d2547..4941918 100644
--- a/src/core/token.rs
+++ b/src/core/token.rs
@@ -21,7 +21,7 @@ pub struct AuthToken<T> {
     pub exp: u64,
     pub iat: u64,
     pub sub: String,
-    pub data: Option<T>,
+    pub data: T,
 }
 
 impl<'de, T: DeserializeOwned + Serialize> AuthToken<T> {
@@ -58,7 +58,7 @@ impl<'de, T: DeserializeOwned + Serialize> AuthToken<T> {
     /// - `encoding_key`: Private key for signing
     pub(crate) fn sign(
         sub: String,
-        data: Option<T>,
+        data: T,
         exp: u64,
         encoding_key: &EncodingKey,
     ) -> String {
@@ -117,7 +117,13 @@ mod test {
         dotenv::dotenv().ok();
         let auth = build_auth_manager();
 
-        let signed = AuthToken::<String>::sign(Pubkey::new_unique().to_string(), None, 0, &auth.encoding_key);
+        let signed = AuthToken::<String>::sign(
+            Pubkey::new_unique().to_string(), 
+            serde_json::to_string(&()).unwrap(), 
+            0, 
+            &auth.encoding_key
+        );
+
         AuthToken::<String>::decode(signed.as_str(), 0, &auth.decoding_key).unwrap();
     }
 
@@ -135,7 +141,7 @@ mod test {
 
         let signed = AuthToken::<MockData>::sign(
             Pubkey::new_unique().to_string(), 
-            Some(data.clone()), 
+            data.clone(), 
             0, 
             &auth.encoding_key
         );
@@ -146,7 +152,7 @@ mod test {
             &auth.decoding_key
         ).unwrap();
 
-        let result = decoded.data.clone().unwrap();
+        let result = decoded.data.clone();
         
         assert_eq!(result.user_id, data.user_id);
         assert_eq!(result.username, data.username);
